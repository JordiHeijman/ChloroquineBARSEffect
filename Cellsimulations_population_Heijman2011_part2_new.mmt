[[model]]

[engine]
time = 0 bind time
    in [ms]

[membrane]
level = 0 bind pace

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    0.5      1000.0   0

[[script]]
import matplotlib.pyplot as pl
import numpy as np
import myokit
from scipy.optimize import curve_fit
import myokit.lib.fit as fit

# Get model and protocol, create simulation
m, p, s = myokit.load("Canine LV Epi (Heijman-2011).mmt")

import csv
with open("POPULATION DATA/population_data_heijman.csv", 'wb') as f, open("POPULATION DATA/population_Vm_heijman.csv", 'wb') as g, open("POPULATION DATA/population_Cai_heijman.csv", 'wb') as h:
    writer1 = csv.writer(f, delimiter=",")
    writer2 = csv.writer(g, delimiter=",")
    writer3 = csv.writer(h, delimiter=",") 
    ################################################################
    def runProtocol(m, bcl, ISO_dose, chloroquine_dose, azithromycin_dose, row):
        p = myokit.Protocol()
        p.schedule(1,10,1.0,bcl, 0)
        
        # IC50 data from Crumb et al 2016
        ina_block = 0 + (chloroquine_dose**0.7034)*(1 - 0)/(chloroquine_dose**0.7034 + 250.9**0.7034)
        inal_block = 0 + (chloroquine_dose**0.5205)*(1 - 0)/(chloroquine_dose**0.5205 + 198**0.5205)
        ikr_block = 0 + (chloroquine_dose**0.6141)*(1 - 0)/(chloroquine_dose**0.6141 + 6.892**0.6141)
        iks_block = 0 + (chloroquine_dose**1.075)*(1 - 0)/(chloroquine_dose**1.075 + 110.7**1.075)
        ik1_block = 0 + (chloroquine_dose**0.8199)*(1 - 0)/(chloroquine_dose**0.8199 + 10.59**0.8199)
        ito_block = 0 + (chloroquine_dose**0.2734)*(1 - 0)/(chloroquine_dose**0.2734 + 4783325**0.2734)
        ical_block = 0 + (chloroquine_dose**0.2396)*(1 - 0)/(chloroquine_dose**0.2396 + 3253459**0.2396)
        
        print "INaB Chloroquine " + str(chloroquine_dose) + " mcM = " + str(ina_block) + ", INaLB = " + str(inal_block) + ", IKrB = " + str(ikr_block) + ", IKsB = " + str(iks_block) + ", IK1B = " + str(ik1_block) + ", ItoB = " + str(ito_block) + ", ICaLB = " + str(ical_block)

        ina_block_azi = 0 + (azithromycin_dose**1.867)*(1 - 0)/(azithromycin_dose**1.867 + 790.3**1.867)
        inal_block_azi = 0 + (azithromycin_dose**1.857)*(1 - 0)/(azithromycin_dose**1.857 + 189**1.857)
        ikr_block_azi = 0 + (azithromycin_dose**0.472)*(1 - 0)/(azithromycin_dose**0.472 + 66.19**0.472)
        iks_block_azi = 0 + (azithromycin_dose**1.355)*(1 - 0)/(azithromycin_dose**1.355 + 470.4**1.355)
        ik1_block_azi = 0 + (azithromycin_dose**10.26)*(1 - 0)/(azithromycin_dose**10.26 + 410**10.26)
        ito_block_azi = 0 + (azithromycin_dose**0.5175)*(1 - 0)/(azithromycin_dose**0.5175 + 88.54**0.5175)
        ical_block_azi = 0 + (azithromycin_dose**2.115)*(1 - 0)/(azithromycin_dose**2.115 + 702.3**2.115)
        
        print "INaB Azithromycin " + str(azithromycin_dose) + " mcM = " + str(ina_block_azi) + ", INaLB = " + str(inal_block_azi) + ", IKrB = " + str(ikr_block_azi) + ", IKsB = " + str(iks_block_azi) + ", IK1B = " + str(ik1_block_azi) + ", ItoB = " + str(ito_block_azi) + ", ICaLB = " + str(ical_block_azi)
        
        var_ina = float(row[0])
        var_inal = float(row[1])
        var_ical = float(row[2])
        var_ito = float(row[3])
        var_ikr = float(row[4])
        var_iks = float(row[5])
        var_ik1 = float(row[6])
        var_incx = float(row[7])
        var_ikur = float(row[8])
        var_inak = float(row[9])      
        
        s = myokit.Simulation(m, p, apd_var='membrane.V')
        s.set_constant('iso.L', ISO_dose)
        s.set_constant('parameters.chloro_INa_Block', ina_block)
        s.set_constant('parameters.chloro_INaL_Block', inal_block)
        s.set_constant('parameters.chloro_IKr_Block', ikr_block)
        s.set_constant('parameters.chloro_IKs_Block', iks_block)
        s.set_constant('parameters.chloro_IK1_Block', ik1_block)
        s.set_constant('parameters.chloro_Ito_Block', ito_block)
        s.set_constant('parameters.chloro_ICaL_Block', ical_block)
        s.set_constant('parameters.azithro_INa_Block', ina_block_azi)
        s.set_constant('parameters.azithro_INaL_Block', inal_block_azi)
        s.set_constant('parameters.azithro_IKr_Block', ikr_block_azi)
        s.set_constant('parameters.azithro_IKs_Block', iks_block_azi)
        s.set_constant('parameters.azithro_IK1_Block', ik1_block_azi)
        s.set_constant('parameters.azithro_Ito_Block', ito_block_azi)
        s.set_constant('parameters.azithro_ICaL_Block', ical_block_azi)
        s.set_constant('parameters.ICaL_Block', var_ical)
        s.set_constant('parameters.IK1_Block', var_ik1)
        s.set_constant('parameters.IKr_Block', var_ikr)
        s.set_constant('parameters.IKs_Block', var_iks)
        s.set_constant('parameters.IKur_Block', var_ikur)
        s.set_constant('parameters.INa_Block', var_ina)
        s.set_constant('parameters.INaL_Block', var_inal)
        s.set_constant('parameters.INaK_Block', var_inak)
        s.set_constant('parameters.INCX_Block', var_incx)
        s.set_constant('parameters.Ito_Block', var_ito)
               
        s.pre(1000*bcl)
        s.set_tolerance(1e-8, 1e-8)
        vt=0.9*s.state()[m.get('membrane.V').indice()]
        vt30 = 0.3*s.state()[m.get('membrane.V').indice()]
        vt50 = 0.5*s.state()[m.get('membrane.V').indice()]
        vt70 = 0.7*s.state()[m.get('membrane.V').indice()]
        vt_rmp=s.state()[m.get('membrane.V').indice()]
        d, apds = s.run(1000, apd_threshold=vt, log_interval=0.1)
        if not apds['duration']:
            duration = str(None)
        else:
            duration = apds['duration'][0]
        dvdtmax = np.max(d['dot(membrane.V)'])
        if not d.apd(v='membrane.V', threshold = vt30)['duration']:
            apd30 = str(None)
        else:
            apd30 = d.apd(v='membrane.V', threshold = vt30)['duration'][0]
        if not d.apd(v='membrane.V', threshold = vt50)['duration']:
            apd50 = str(None)
        else:    
            apd50 = d.apd(v='membrane.V', threshold = vt50)['duration'][0]
        if not d.apd(v='membrane.V', threshold = vt70)['duration']:
            apd70 = str(None)
        else:
            apd70 = d.apd(v='membrane.V', threshold = vt70)['duration'][0]
        APA = abs(vt_rmp - np.max(d['membrane.V'])) #AP amplitude
        
        return d, var_ina, var_inal, var_ical, var_ito, var_ikr, var_iks, var_ik1, var_incx, var_ikur, var_inak, apd30, apd50, apd70, duration, APA, dvdtmax, vt_rmp
    
    ###################################################################################    
    #with open("POPULATION DATA/Chloro0_beta1/population_data_heijman_MERGED.csv") as csvfile:
    with open("POPULATION DATA/Chloro0/MERGED/population_data_heijman_MERGED_in.csv") as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            CL = 500 #1000
            Chloro_dose = 5 #5 #10
            Azithro_dose = 20 #20
            ISO_rand = np.random.uniform(low=0.1, high=1.0, size=(1,))
            ISO = 0 #row[10] #ISO_rand[0] #0 #1
            datalog, var_ina, var_inal, var_ical, var_ito, var_ikr, var_iks, var_ik1, var_incx, var_ikur, var_inak, apd30, apd50, apd70, apd, APA, dvdtmax, rmp = runProtocol(m, CL, ISO, Chloro_dose, Azithro_dose, row) 
            CaT = 1*((max(datalog['output.Cai'])) - (min(datalog['output.Cai'])))
                        
            print "APD = " + str(apd) + ", RMP = " + str(rmp) 
            
            pl.figure("Population model")
            pl.subplot(2,1,1)
            pl.plot(datalog['engine.time'], datalog['membrane.V'], '-b')        
            pl.subplot(2,1,2)
            pl.plot(datalog['engine.time'], datalog['output.Cai'], '-b')
            pl.show()
            pl.savefig("POPULATION DATA/population_model_heijman.png")
        
            ############################PRINT#######################################
            Vm1 = datalog['membrane.V']
            print_material1 = (var_ina, var_inal, var_ical, var_ito, var_ikr, var_iks, var_ik1, var_incx, var_ikur, var_inak, ISO, apd30, apd50, apd70, apd, APA, dvdtmax, rmp, CaT)
            CaT1 = datalog['output.Cai']
            writer1.writerow(print_material1)
            writer2.writerow(Vm1)
            writer3.writerow(CaT1)

